# .github/workflows/docker-build-push.yml
name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: europe-central2-docker.pkg.dev
  IMAGE_NAME: cv-ai-handler/docker-cv-ai-handler/cv-ai-handler
  PROJECT_ID: cv-ai-handler

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Configure Docker for Google Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.REGISTRY }} --quiet
        
    - name: Extract metadata
      id: meta
      run: |
        # Get version from pom.xml
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Set image tags
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Tagged release
          TAG=${GITHUB_REF#refs/tags/}
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
        else
          # Branch build
          BRANCH=${GITHUB_REF#refs/heads/}
          SHA=${GITHUB_SHA::8}
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION-$BRANCH-$SHA" >> $GITHUB_OUTPUT
        fi
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}
          
    - name: Output image info
      run: |
        echo "✅ Docker image built and pushed successfully!"
        echo "📦 Image: ${{ steps.meta.outputs.tags }}"
        echo "🏪 Registry: https://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
